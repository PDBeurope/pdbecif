stages:
  - test
  - package
  - upload

# .prep_test: &prep_test |
#   - apt-get update
#   - apt-get install -y --force-yes lsb-release fakeroot python-dev python-pip
#   - pip install -r requirements.txt
#   - echo "export PATCH=$CI_BUILD_ID" > PATCH_VERSION


pages:
  stage: test
  allow_failure: true
  script:
    - apt-get update -qy
    - apt-get install -y --force-yes lsb-release fakeroot python-dev python-pip
    - pip install -r requirements.txt
    - echo "export PATCH=$CI_BUILD_ID" > PATCH_VERSION
    # - *prep_test
    - mkdir -p public
    - time make cover && mv htmlcov public/
    - mv docs public/
    - echo '<html><body><a href="htmlcov/index.html">Test Coverage</a><br/><a href="docs/index.html">Developer Documentation</a></body></html>' > public/index.html
  coverage: '/TOTAL.*?\s+(\d+%)/'
  artifacts:
    paths:
      - public
  only:
    - master



test:
  stage: test
  script:
    - apt-get update -qy
    - apt-get install -y --force-yes lsb-release fakeroot python-dev python-pip
    - pip install -r requirements.txt
    - echo "export PATCH=$CI_BUILD_ID" > PATCH_VERSION
    - make test
  variables:
    PATCH: $CI_BUILD_ID
  only:
    - dev
    - master
    - python2/master

package:
  stage: package
  script:
    - apt-get update -qy
    - apt-get install -y --force-yes lsb-release fakeroot python-dev python-pip
    - pip install -r requirements.txt
    - make version PATCH=$CI_BUILD_ID
    - make package
  artifacts:
    paths:
      - ./dist/*.whl
      - ./dist/*.tar.gz
  variables:
    PATCH: $CI_BUILD_ID
  only:
    - python2/master

